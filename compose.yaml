services:
  backend:
    container_name: backend
    build:
      context: "backend/"
    environment:
      # :8080 to listen on all interfaces (be reachable from host).
      # Note that tests use localhost + SERVER_HOST for requests.
      # Make sure to run the tests after changing these.
      - SERVER_HOST=:8080 
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_NAME=app
      - DB_URL=postgres://postgres:password@database:5432/app # URL=postgres://[user]:[password]@[DB host]/[DB to use]
      - LOG_DB_URL=postgres://postgres:password@log_database:5432/app # URL=postgres://[user]:[password]@[DB host]/[DB to use]
      - JWT_KEY=better-change-it-in-prod # Secret JWT sign key. Should have appropriate length to be secure.
      - JWT_EXPIRY=1 # JWT expiry time in seconds. Currently has a small value for the tests. Change for prod.
      - MIN_FILE_SIZE=1 # The smallest amount of bytes an uploaded file can have. Can be important since s3 has overhead when storing files.
      - STORAGE_OPTION=local # Whether to use cloud (aws) or local (seaweedfs) storage. Either set it to cloud or local.
      - LOCAL_BUCKET=file-hosting-app-test # This is not important if STORAGE_OPTION is set to cloud. Sets the bucket name.
      - LOCAL_AWS_ACCESS_KEY_ID=test # This is not important if STORAGE_OPTION is set to cloud.
      - LOCAL_AWS_SECRET_ACCESS_KEY=test # This is not important if STORAGE_OPTION is set to cloud.
    ports:
      - "8080:8080" # [Host port]:[Container Port]
    depends_on:
      database:
        condition: service_healthy
      log_database:
        condition: service_healthy
      s3:
        condition: service_healthy
    develop:
        watch:
          - action: rebuild
            path: ./backend
            target: /app
  frontend:
    container_name: frontend
    build:
      context: "frontend/"
    ports:
      - "5173:5173" # [Host port]:[Container Port]
    develop:
      watch:
      - action: sync
        path: ./frontend
        target: /app
        ignore:
          - node_modules
  database:
    container_name: database
    build:
      dockerfile: "./postgres.dockerfile"
    ports:
      - 5432:5432 # [Host port]:[Container Port]
    user: postgres
    environment:
      POSTGRES_USER: postgres # The PostgreSQL user (useful to connect to the database).
      POSTGRES_PASSWORD: password # The PostgreSQL password (useful to connect to the database).
      POSTGRES_DB: app # The PostgreSQL default database (automatically created at first launch).
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "db_prod"]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - database:/var/lib/postgresql/data
  # Use a separate database to log requests users make.
  log_database:
    container_name: log_database
    build:
      dockerfile: "./postgres.dockerfile"
    ports:
      - 24000:5432 # [Host port]:[Container Port]
    user: postgres
    environment:
      POSTGRES_USER: postgres # The PostgreSQL user (useful to connect to the database).
      POSTGRES_PASSWORD: password # The PostgreSQL password (useful to connect to the database).
      POSTGRES_DB: app # The PostgreSQL default database (automatically created at first launch).
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "db_prod"]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - log_database:/var/lib/postgresql/data
  master:
    container_name: seaweedfs_master
    image: chrislusf/seaweedfs:latest
    ports:
      - 9333:9333
      - 19333:19333
      - 9324:9324
    command: "master -ip=master -ip.bind=0.0.0.0 -volumeSizeLimitMB=10000 -metricsPort=9324"
    volumes:
      - ./seaweedfs/master:/data
  volume:
    container_name: seaweedfs_volume
    image: chrislusf/seaweedfs:latest
    depends_on:
      - master
    ports:
      - 18080:18080
      - 9325:9325
    command: 'volume -mserver="master:9333" -ip.bind=0.0.0.0 -port=18080 -dir=/data -max=8 -metricsPort=9325'
    volumes:
      - ./seaweedfs/volume:/data
  filer:
    container_name: seaweedfs_filer
    image: chrislusf/seaweedfs:latest
    command: 'filer -master="master:9333" -ip.bind=0.0.0.0 -metricsPort=9326'
    depends_on:
      - master
      - volume
    ports:
      - 8888:8888
      - 18888:18888
      - 9326:9326
    volumes:
      - ./seaweedfs/filer:/data
  s3:
    container_name: seaweedfs_s3
    build:
      dockerfile: "./seaweedfss3.dockerfile"
    ports:
      - 8333:8333
      - 9327:9327
    command: 's3 -filer="filer:8888" -ip.bind=0.0.0.0 -config=/etc/s3/s3config.json -metricsPort=9327'
    depends_on:
      - master
      - volume
      - filer
    healthcheck:
      test: sh -c "awscurl --access_key test --secret_key test --service s3 http://localhost:8333/file-hosting-app-test"
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - ./seaweedfss3.json:/etc/s3/s3config.json
# Below are services for monitoring, uncomment if needed.
  # prometheus:
  #   container_name: prometheus
  #   image: prom/prometheus:v2.21.0
  #   ports:
  #     - 9090:9090
  #   volumes:
  #     - ./prometheus.yaml:/etc/prometheus/prometheus.yaml
  #     - prometheus:/prometheus
  #   command: 
  #     - --web.enable-lifecycle
  #     - --config.file=/etc/prometheus/prometheus.yaml
  #     - --storage.tsdb.retention.time=15d
  # node_exporter:
  #   container_name: node_exporter
  #   image: quay.io/prometheus/node-exporter:latest
  #   volumes:
  #     - /proc:/host/proc:ro
  #     - /sys:/host/sys:ro
  #     - /:/rootfs:ro
  #     - /:/host:ro,rslave
  #   command: 
  #     - '--path.rootfs=/host'
  #     - '--path.procfs=/host/proc' 
  #     - '--path.sysfs=/host/sys'
  #     - --collector.filesystem.ignored-mount-points
  #     - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
  #   ports:
  #     - 9100:9100
  # cadvisor:
  #   container_name: cadvisor
  #   image: gcr.io/cadvisor/cadvisor
  #   command:
  #     - '-port=28080'
  #   volumes:
  #     - /:/rootfs:ro
  #     - /var/run:/var/run:rw
  #     - /sys:/sys:ro
  #     - /var/lib/docker/:/var/lib/docker:ro
  #   ports:
  #     - 28080:28080
  # grafana:
  #   container_name: grafana
  #   image: grafana/grafana
  #   user: "472"
  #   depends_on:
  #     - prometheus
  #   ports:
  #     - 3000:3000
  #   volumes:
  #     - grafana:/var/lib/grafana
  #     - ./grafana.yaml:/etc/grafana/provisioning/datasources/datasource.yaml
  #   environment:
  #     - GF_SECURITY_ADMIN_USER=test
  #     - GF_SECURITY_ADMIN_PASSWORD=test
  #     - GF_SECURITY_SECRET_KEY=random-string-change-in-prod

volumes:
  database: {}
  log_database: {}
  prometheus: {}
  grafana: {}